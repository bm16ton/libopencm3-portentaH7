	struct spi_master *master;
	struct spi_tiny_usb *priv;
	struct usb_spi_platform_data *pdata = dev_get_platdata(&pdev->dev);
	struct device *dev = &pdev->dev;
	int ret;

	master = spi_alloc_master(&pdev->dev, sizeof(*priv));
	if (!master)
		return -ENOMEM;

	device_set_node(&master->dev, dev_fwnode(dev));

	platform_set_drvdata(pdev, master);

	priv = spi_master_get_devdata(master);

/*	dln2->buf = devm_kmalloc(&pdev->dev, DLN2_SPI_BUF_SIZE, GFP_KERNEL);
	if (!dln2->buf) {
		ret = -ENOMEM;
		goto exit_free_master;
	}
*/
	priv->master = master;
	priv->pdev = pdev;
	priv->port = pdata->port;
	/* cs/mode can never be 0xff, so the first transfer will set them */
	priv->cs = 0xff;
	priv->mode = 0xff;

/*
	ret = dln2_spi_get_cs_num(dln2, &master->num_chipselect);
	if (ret < 0) {
		dev_err(&pdev->dev, "Failed to get number of CS pins\n");
		goto exit_free_master;
	}
*/

	master->min_speed_hz = 450;
	master->max_speed_hz = 30000000;
	master->bits_per_word_mask = SPI_BPW_RANGE_MASK(4, 16);


	master->bus_num = -1;
	master->set_cs = setcs;
	master->transfer_one_message = spi_tiny_usb_xfer_one;
	master->auto_runtime_pm = false;


	ret = devm_spi_register_master(&pdev->dev, master);
	if (ret < 0) {
		dev_err(&pdev->dev, "Failed to register master\n");
		goto exit_register;
	}

    priv->spiinfo.chip_select = 1;


//	dln2->spiinfo.swnode = &mcp2515_node;
//    dln2->spiinfo.swnode = &w25q32_node;
//	dln2->spiinfo.mode = SPI_MODE_0;
//	dln2->spiinfo.controller_data = dln2;

	priv->spidev = spi_new_device(priv->master, &dln2->spiinfo);
	return ret;

exit_register:
	pm_runtime_disable(&pdev->dev);
	pm_runtime_set_suspended(&pdev->dev);

